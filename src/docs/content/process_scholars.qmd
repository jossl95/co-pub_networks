---
title: "Data Preparation OpenAlex"
author: 
  - name: "Jos Slabbekoorn"
  - name: "Jochem Tolsma"
  - name: "Bas Hofstra"
  - name: "Roza Meuleman"

date: today

---

## Getting Started

```{r}
#| warning: false
#| output: false
# clear the global environment
rm(list = ls())
gc()
```

```{r}
#| warning: false
#| output: false
source("src/utils/custom_functions.r")

# load and activate packages
fpackage.check(c(
  'tidyverse', 'readxl',  'stringr', 
  'lubridate', 'openalexR', 'rvest', 'jsonlite'
))

options(openalexR.mailto = "jos.slabbekoorn@ru.nl")
```


```{r}
dir = file.path('data', 'processed')
file = list.files(dir, pattern = 'names.Rds')
names = freadRDS(file.path(dir, file))


file = list.files(dir, pattern = 'scholarid.Rds')
scholar = freadRDS(file.path(dir, file)) |>
  select(naam, university) |>
  distinct(.keep_all = TRUE) |>
  unnest_longer(university) |>
  left_join(names) |>
  unite(
    initials:last_name, 
    col=name, sep = ' ', 
    na.rm=TRUE, remove=FALSE) |>
  unite(
    c(name, maiden_name), 
    col=name2, sep = '-', 
    na.rm=TRUE, remove=FALSE)
```


```{r}
scholar = scholar |>
  mutate(
    university_name = university |>
      str_replace("(Uni |uni)", "University ") |>
      str_replace('(UU)', 'Utrecht University') |>
      str_replace('(UCU)', 'Universit College Utrecht') |>
      str_replace('(Leiden|Leiden University)', 'Leiden University') |>
      str_replace('(RUG)', 'Rijksuniversiteit Groningen') |>
      str_replace('(RU)', 'Radboud University Nijmegen') |>
      str_replace('(UvA|Uva)', 'Universiteit van Amsterdam') |>
      str_replace('(VU)', 'Vrije Universiteit Amsterdam') |>
      str_replace('(EUR)', 'Erasmus Universiteit Rotterdam') |>
      str_replace('(UvT|Tilburg|Uvt)', 'Universiteit van Tilburg') |>
      str_replace('(TU Delft)', 'Technische Universiteit Delft') |>
      str_replace('(WUR)', 'Wageningen University & Research') |>
      str_replace('(Universita degli studi di Milano)', 'University of Milan') |>
      str_replace('(Politie)', NA_character_) |>
      str_replace('(UvH)', NA_character_) |>
      str_replace('(UvG)', NA_character_)
  ) |>
  filter(!is.na(university_name))

institutions = scholar$university_name |> unique()

```

```{r}
oa_fetch_institution = function(institution, pause=0.5){
  if (pause > 0) Sys.sleep(pause)
  oa_fetch(
    entity = "institutions",
    search=institution,
    mailto = "jos.slabbekoorn@ru.nl"
  )$id[1]
}

hold = c()
for (institution in institutions){
  id <- oa_fetch_institution(institution)
  hold[[institution]] = tibble::tibble(
    university_name = institution,
    university_url = id, 
    university_id = str_remove(id, 'https://openalex.org/')
  )
}

institutions = bind_rows(hold)
scholar = scholar |>
  left_join(institutions)
```

```{r}
oa_fetch_scholar = function(
    scholar_name, 
    university_ids,
    pause = 0.5
  ){
  # fetch oa scholar information for all name id pairs
  hold = list()
  for (id in university_ids){
    if (pause > 0) Sys.sleep(pause)
    
    hold[[id]] = oa_fetch(
      entity = 'author',
      search = scholar_name,
      affiliations.institution.id = id
    )
  }
  
  # combine the results and drop duplicates
  bind_rows(hold) |> distinct(.keep_all = TRUE)
}



```

```{r}
scholars = scholar$name |> unique()

hold = list()
for (scholar_name in scholars) {
  tab = scholar |> 
    filter(name == scholar_name) |>
    select(name:university_id)

  university_ids = as.list(na.omit(tab$university_id))
  if (length(university_ids) > 0){
    hold[[scholar_name]] = oa_fetch_scholar(scholar_name, university_ids) |>
      mutate(name = scholar_name)
  }
}

oa = bind_rows(hold)
```

```{r}
saveRDS(oa, file.path('data', 'utils', 'oa_scholar.Rds'))
```



